print("Hello world")
setwd("~/Machine Learning A-Z Template Folder/Part 3 - Classification/Section 14 - Logistic Regression/Logistic_Regression")
#SVR
s_dataset = read.csv("Position_Salaries.csv")
# spliting the data_set
library(caTools)
set.seed(123)
to_split = sample.split(s_dataset$Salary,SplitRatio = 0.9)
training_set = subset(s_dataset,to_split == TRUE)
test_set = subset(s_dataset,to_split == FALSE)
# training(fitting) the data_set SVR linear
#install.packages('e1071')
library(e1071)
svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression',
kernel = 'radial'
)
# prediction
y_pred_test = predict(svr_regressor,newdata = test_set)
print(y_pred_test)
man_in = 6.5
y_pred_man = predict(svr_regressor,data.frame(Level = man_in))
print(y_pred_man)
# Training set with test set
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$Level, y = training_set$Salary),
colour = "Green")+
geom_point(aes(x = test_set$Level, y = predict(svr_regressor, newdata = test_set)),
colour = "red")+
geom_point(aes(x = man_in, y = y_pred_man),
colour = "magenta")+
geom_line(aes( x = training_set$Level, y = predict(svr_regressor, newdata = training_set)),
colour = 'blue')+
ggtitle("Salary Prediction ")+
xlab("position")+
ylab("Salary")
# Summary of the simple regression and polynomial regression
print(summary(svr_regressor))
print(y_pred_man)
print(y_pred_test)
clear
#Logistic_regression
l_dataset = read.csv("Social_Network_Ads.csv")
l_dataset = l_dataset[,3:5]
# Splitting the data set
library(caTools)
set.seed(123)
to_split = sample.split(l_dataset$Purchased,SplitRatio = 3/4)
training_set = subset(l_dataset,to_split == TRUE)
test_set = subset(l_dataset,to_split == FALSE)
# Feature Scaling
training_set[1:2] = scale(training_set[1:2])
test_set[1:2] = scale(test_set[1:2])
# trainning the logistic regression model
log_classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
y_predict_train = predict(log_classifier,newdata = training_set[1:2], type = 'response')
y_predict_test_pre = predict(log_classifier,newdata = test_set[1:2], type = 'response')
y_predict_test = ifelse(y_predict_test_pre > 0.5, 1 , 0)
print(y_predict_test)
# Evaluvate the prediction using confusion matrix
cm = table(test_set[,3],y_predict_test)
resu = ifelse(cm[1,1] > cm[1,2] && cm[2,1] < cm[2,2],'good','bad')
print(resu)
correct_pridiction = cm[1,1] + cm[2,2]
wrong_prediction = cm[1,2] + cm[2,1]
paste('Correct prediction',correct_pridiction, "Wrong prediction", wrong_prediction)
# Visualising the Test set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(log_classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
#Logistic_regression
l_dataset = read.csv("Social_Network_Ads.csv")
l_dataset = l_dataset[,3:5]
# Splitting the data set
library(caTools)
set.seed(123)
to_split = sample.split(l_dataset$Purchased,SplitRatio = 3/4)
training_set = subset(l_dataset,to_split == TRUE)
test_set = subset(l_dataset,to_split == FALSE)
# Feature Scaling
training_set[1:2] = scale(training_set[1:2])
test_set[1:2] = scale(test_set[1:2])
# trainning the logistic regression model
log_classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
y_predict_train = predict(log_classifier,newdata = training_set[1:2], type = 'response')
y_predict_test_pre = predict(log_classifier,newdata = test_set[1:2], type = 'response')
y_predict_test = ifelse(y_predict_test_pre > 0.5, 1 , 0)
print(y_predict_test)
# Evaluvate the prediction using confusion matrix
cm = table(test_set[,3],y_predict_test)
resu = ifelse(cm[1,1] > cm[1,2] && cm[2,1] < cm[2,2],'good','bad')
print(resu)
correct_pridiction = cm[1,1] + cm[2,2]
wrong_prediction = cm[1,2] + cm[2,1]
paste('Correct prediction',correct_pridiction, "Wrong prediction", wrong_prediction)
# Visualising the Test set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(log_classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
print(summary(log_classifier))
plot(log_classifier)
#Logistic_regression
l_dataset = read.csv("Social_Network_Ads.csv")
l_dataset = l_dataset[,3:5]
# Splitting the data set
library(caTools)
set.seed(123)
to_split = sample.split(l_dataset$Purchased,SplitRatio = 3/4)
training_set = subset(l_dataset,to_split == TRUE)
test_set = subset(l_dataset,to_split == FALSE)
# Feature Scaling
training_set[1:2] = scale(training_set[1:2])
test_set[1:2] = scale(test_set[1:2])
# trainning the logistic regression model
log_classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
y_predict_train = predict(log_classifier,newdata = training_set[1:2], type = 'response')
y_predict_test_pre = predict(log_classifier,newdata = test_set[1:2], type = 'response')
y_predict_test = ifelse(y_predict_test_pre > 0.5, 1 , 0)
print(y_predict_test)
# Evaluvate the prediction using confusion matrix
cm = table(test_set[,3],y_predict_test)
resu = ifelse(cm[1,1] > cm[1,2] && cm[2,1] < cm[2,2],'good','bad')
print(resu)
correct_pridiction = cm[1,1] + cm[2,2]
wrong_prediction = cm[1,2] + cm[2,1]
paste('Correct prediction',correct_pridiction, "Wrong prediction", wrong_prediction)
# Visualising the Test set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(log_classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Summary of the Logistic regression
print(summary(log_classifier))
plot(log_classifier)
#Logistic_regression
l_dataset = read.csv("Social_Network_Ads.csv")
l_dataset = l_dataset[,3:5]
# Splitting the data set
library(caTools)
set.seed(123)
to_split = sample.split(l_dataset$Purchased,SplitRatio = 3/4)
training_set = subset(l_dataset,to_split == TRUE)
test_set = subset(l_dataset,to_split == FALSE)
# Feature Scaling
training_set[1:2] = scale(training_set[1:2])
test_set[1:2] = scale(test_set[1:2])
# trainning the logistic regression model
log_classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
y_predict_train = predict(log_classifier,newdata = training_set[1:2], type = 'response')
y_predict_test_pre = predict(log_classifier,newdata = test_set[1:2], type = 'response')
y_predict_test = ifelse(y_predict_test_pre > 0.5, 1 , 0)
print(y_predict_test)
# Evaluvate the prediction using confusion matrix
cm = table(test_set[,3],y_predict_test)
resu = ifelse(cm[1,1] > cm[1,2] && cm[2,1] < cm[2,2],'good','bad')
print(resu)
correct_pridiction = cm[1,1] + cm[2,2]
wrong_prediction = cm[1,2] + cm[2,1]
paste('Correct prediction',correct_pridiction, "Wrong prediction", wrong_prediction)
# Visualising the Test set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(log_classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'yellow', 'blue'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Summary of the Logistic regression
print(summary(log_classifier))
#plot(log_classifier)
#Logistic_regression
l_dataset = read.csv("Social_Network_Ads.csv")
l_dataset = l_dataset[,3:5]
# Splitting the data set
library(caTools)
set.seed(123)
to_split = sample.split(l_dataset$Purchased,SplitRatio = 3/4)
training_set = subset(l_dataset,to_split == TRUE)
test_set = subset(l_dataset,to_split == FALSE)
# Feature Scaling
training_set[1:2] = scale(training_set[1:2])
test_set[1:2] = scale(test_set[1:2])
# trainning the logistic regression model
log_classifier = glm(formula = Purchased ~ .,
family = binomial,
data = training_set)
y_predict_train = predict(log_classifier,newdata = training_set[1:2], type = 'response')
y_predict_test_pre = predict(log_classifier,newdata = test_set[1:2], type = 'response')
y_predict_test = ifelse(y_predict_test_pre > 0.5, 1 , 0)
print(y_predict_test)
# Evaluvate the prediction using confusion matrix
cm = table(test_set[,3],y_predict_test)
resu = ifelse(cm[1,1] > cm[1,2] && cm[2,1] < cm[2,2],'good','bad')
print(resu)
correct_pridiction = cm[1,1] + cm[2,2]
wrong_prediction = cm[1,2] + cm[2,1]
paste('Correct prediction',correct_pridiction, "Wrong prediction", wrong_prediction)
# Visualising the Test set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = test_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(log_classifier, type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'Logistic Regression (Test set)',
xlab = 'Age', ylab = 'Estimated Salary',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'yellow', 'blue'))
points(set, pch = 21, bg = ifelse(set[, 3] == 1, 'green', 'red'))
# Summary of the Logistic regression
print(summary(log_classifier))
#plot(log_classifier)
