svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression'
kernel = 'polynomial'
)
# prediction
y_pred_test = predict(svr_regressor,newdata = test_set)
y_pred_man = predict(svr_regressor,data.frame(Level = 6.5))
# Training set with test set
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$Level, y = training_set$Salary),
colour = "Green")+
geom_point(aes(x = test_set$Level, y = predict(svr_regressor, newdata = test_set)),
colour = "red")+
geom_line(aes( x = training_set$Level, y = predict(svr_regressor, newdata = training_set)),
colour = 'blue')+
ggtitle("Salary Prediction ")+
xlab("position")+
ylab("Salary")
# Summary of the simple regression and polynomial regression
print(summary(svr_regressor))
library(e1071)
svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression',
kernel = 'polynomial'
)
#SVR
s_dataset = read.csv("Position_Salaries.csv")
# spliting the data_set
library(caTools)
set.seed(123)
to_split = sample.split(s_dataset$Salary,SplitRatio = 0.9)
training_set = subset(s_dataset,to_split == TRUE)
test_set = subset(s_dataset,to_split == FALSE)
# training(fitting) the data_set SVR linear
#install.packages('e1071')
library(e1071)
svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression',
kernel = 'polynomial'
)
# prediction
y_pred_test = predict(svr_regressor,newdata = test_set)
y_pred_man = predict(svr_regressor,data.frame(Level = 6.5))
# Training set with test set
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$Level, y = training_set$Salary),
colour = "Green")+
geom_point(aes(x = test_set$Level, y = predict(svr_regressor, newdata = test_set)),
colour = "red")+
geom_line(aes( x = training_set$Level, y = predict(svr_regressor, newdata = training_set)),
colour = 'blue')+
ggtitle("Salary Prediction ")+
xlab("position")+
ylab("Salary")
# Summary of the simple regression and polynomial regression
print(summary(svr_regressor))
#SVR
s_dataset = read.csv("Position_Salaries.csv")
# spliting the data_set
library(caTools)
set.seed(123)
to_split = sample.split(s_dataset$Salary,SplitRatio = 0.9)
training_set = subset(s_dataset,to_split == TRUE)
test_set = subset(s_dataset,to_split == FALSE)
# training(fitting) the data_set SVR linear
#install.packages('e1071')
library(e1071)
svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression',
kernel = 'radial basis'
)
# prediction
y_pred_test = predict(svr_regressor,newdata = test_set)
y_pred_man = predict(svr_regressor,data.frame(Level = 6.5))
# Training set with test set
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$Level, y = training_set$Salary),
colour = "Green")+
geom_point(aes(x = test_set$Level, y = predict(svr_regressor, newdata = test_set)),
colour = "red")+
geom_line(aes( x = training_set$Level, y = predict(svr_regressor, newdata = training_set)),
colour = 'blue')+
ggtitle("Salary Prediction ")+
xlab("position")+
ylab("Salary")
# Summary of the simple regression and polynomial regression
print(summary(svr_regressor))
svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression',
kernel = 'radial basis'
)
library(e1071)
svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression',
kernel = 'radialbasis'
)
library(e1071)
svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression',
kernel = 'radial'
)
#SVR
s_dataset = read.csv("Position_Salaries.csv")
# spliting the data_set
library(caTools)
set.seed(123)
to_split = sample.split(s_dataset$Salary,SplitRatio = 0.9)
training_set = subset(s_dataset,to_split == TRUE)
test_set = subset(s_dataset,to_split == FALSE)
# training(fitting) the data_set SVR linear
#install.packages('e1071')
library(e1071)
svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression',
kernel = 'radial'
)
# prediction
y_pred_test = predict(svr_regressor,newdata = test_set)
y_pred_man = predict(svr_regressor,data.frame(Level = 6.5))
# Training set with test set
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$Level, y = training_set$Salary),
colour = "Green")+
geom_point(aes(x = test_set$Level, y = predict(svr_regressor, newdata = test_set)),
colour = "red")+
geom_line(aes( x = training_set$Level, y = predict(svr_regressor, newdata = training_set)),
colour = 'blue')+
ggtitle("Salary Prediction ")+
xlab("position")+
ylab("Salary")
# Summary of the simple regression and polynomial regression
print(summary(svr_regressor))
#SVR
s_dataset = read.csv("Position_Salaries.csv")
# spliting the data_set
library(caTools)
set.seed(123)
to_split = sample.split(s_dataset$Salary,SplitRatio = 0.9)
training_set = subset(s_dataset,to_split == TRUE)
test_set = subset(s_dataset,to_split == FALSE)
# training(fitting) the data_set SVR linear
#install.packages('e1071')
library(e1071)
svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression',
kernel = 'sigmoid'
)
# prediction
y_pred_test = predict(svr_regressor,newdata = test_set)
y_pred_man = predict(svr_regressor,data.frame(Level = 6.5))
# Training set with test set
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$Level, y = training_set$Salary),
colour = "Green")+
geom_point(aes(x = test_set$Level, y = predict(svr_regressor, newdata = test_set)),
colour = "red")+
geom_line(aes( x = training_set$Level, y = predict(svr_regressor, newdata = training_set)),
colour = 'blue')+
ggtitle("Salary Prediction ")+
xlab("position")+
ylab("Salary")
# Summary of the simple regression and polynomial regression
print(summary(svr_regressor))
#SVR
s_dataset = read.csv("Position_Salaries.csv")
# spliting the data_set
library(caTools)
set.seed(123)
to_split = sample.split(s_dataset$Salary,SplitRatio = 0.9)
training_set = subset(s_dataset,to_split == TRUE)
test_set = subset(s_dataset,to_split == FALSE)
# training(fitting) the data_set SVR linear
#install.packages('e1071')
library(e1071)
svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression',
kernel = 'linear'
)
# prediction
y_pred_test = predict(svr_regressor,newdata = test_set)
y_pred_man = predict(svr_regressor,data.frame(Level = 6.5))
# Training set with test set
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$Level, y = training_set$Salary),
colour = "Green")+
geom_point(aes(x = test_set$Level, y = predict(svr_regressor, newdata = test_set)),
colour = "red")+
geom_line(aes( x = training_set$Level, y = predict(svr_regressor, newdata = training_set)),
colour = 'blue')+
ggtitle("Salary Prediction ")+
xlab("position")+
ylab("Salary")
# Summary of the simple regression and polynomial regression
print(summary(svr_regressor))
#SVR
s_dataset = read.csv("Position_Salaries.csv")
# spliting the data_set
library(caTools)
set.seed(123)
to_split = sample.split(s_dataset$Salary,SplitRatio = 0.9)
training_set = subset(s_dataset,to_split == TRUE)
test_set = subset(s_dataset,to_split == FALSE)
# training(fitting) the data_set SVR linear
#install.packages('e1071')
library(e1071)
svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression',
kernel = 'radial'
)
# prediction
y_pred_test = predict(svr_regressor,newdata = test_set)
y_pred_man = predict(svr_regressor,data.frame(Level = 6.5))
# Training set with test set
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$Level, y = training_set$Salary),
colour = "Green")+
geom_point(aes(x = test_set$Level, y = predict(svr_regressor, newdata = test_set)),
colour = "red")+
geom_line(aes( x = training_set$Level, y = predict(svr_regressor, newdata = training_set)),
colour = 'blue')+
ggtitle("Salary Prediction ")+
xlab("position")+
ylab("Salary")
# Summary of the simple regression and polynomial regression
print(summary(svr_regressor))
)
# prediction
y_pred_test = predict(svr_regressor,newdata = test_set)
man_in = 6.5
y_pred_man = predict(svr_regressor,data.frame(Level = man_in))
# Training set with test set
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$Level, y = training_set$Salary),
colour = "Green")+
geom_point(aes(x = test_set$Level, y = predict(svr_regressor, newdata = test_set)),
colour = "red")+
geom_point(aes(x = man_in, y = y_pred_man),
colour = "y")+
geom_line(aes( x = training_set$Level, y = predict(svr_regressor, newdata = training_set)),
colour = 'blue')+
ggtitle("Salary Prediction ")+
xlab("position")+
ylab("Salary")
# Training set with test set
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$Level, y = training_set$Salary),
colour = "Green")+
geom_point(aes(x = test_set$Level, y = predict(svr_regressor, newdata = test_set)),
colour = "red")+
geom_point(aes(x = man_in, y = y_pred_man),
colour = "yellow")+
geom_line(aes( x = training_set$Level, y = predict(svr_regressor, newdata = training_set)),
colour = 'blue')+
ggtitle("Salary Prediction ")+
xlab("position")+
ylab("Salary")
geom_point(aes(x = man_in, y = y_pred_man),
colour = "magenta")+
#SVR
s_dataset = read.csv("Position_Salaries.csv")
# spliting the data_set
library(caTools)
set.seed(123)
to_split = sample.split(s_dataset$Salary,SplitRatio = 0.9)
training_set = subset(s_dataset,to_split == TRUE)
test_set = subset(s_dataset,to_split == FALSE)
# training(fitting) the data_set SVR linear
#install.packages('e1071')
library(e1071)
svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression',
kernel = 'radial'
)
# prediction
y_pred_test = predict(svr_regressor,newdata = test_set)
man_in = 6.5
y_pred_man = predict(svr_regressor,data.frame(Level = man_in))
# Training set with test set
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$Level, y = training_set$Salary),
colour = "Green")+
geom_point(aes(x = test_set$Level, y = predict(svr_regressor, newdata = test_set)),
colour = "red")+
geom_point(aes(x = man_in, y = y_pred_man),
colour = "magenta")+
geom_line(aes( x = training_set$Level, y = predict(svr_regressor, newdata = training_set)),
colour = 'blue')+
ggtitle("Salary Prediction ")+
xlab("position")+
ylab("Salary")
# Summary of the simple regression and polynomial regression
print(summary(svr_regressor))
#SVR
s_dataset = read.csv("Position_Salaries.csv")
# spliting the data_set
library(caTools)
set.seed(123)
to_split = sample.split(s_dataset$Salary,SplitRatio = 0.9)
training_set = subset(s_dataset,to_split == TRUE)
test_set = subset(s_dataset,to_split == FALSE)
# training(fitting) the data_set SVR linear
#install.packages('e1071')
library(e1071)
svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression',
kernel = 'radial'
)
# prediction
y_pred_test = predict(svr_regressor,newdata = test_set)
man_in = 6.5
y_pred_man = predict(svr_regressor,data.frame(Level = man_in))
# Training set with test set
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$Level, y = training_set$Salary),
colour = "Green")+
geom_point(aes(x = test_set$Level, y = predict(svr_regressor, newdata = test_set)),
colour = "red")+
geom_point(aes(x = man_in, y = y_pred_man),
colour = "magenta")+
geom_line(aes( x = training_set$Level, y = predict(svr_regressor, newdata = training_set)),
colour = 'blue')+
ggtitle("Salary Prediction ")+
xlab("position")+
ylab("Salary")
# Summary of the simple regression and polynomial regression
print(summary(svr_regressor))
#SVR
s_dataset = read.csv("Position_Salaries.csv")
# spliting the data_set
library(caTools)
set.seed(123)
to_split = sample.split(s_dataset$Salary,SplitRatio = 0.9)
training_set = subset(s_dataset,to_split == TRUE)
test_set = subset(s_dataset,to_split == FALSE)
# training(fitting) the data_set SVR linear
#install.packages('e1071')
library(e1071)
svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression',
kernel = 'radial'
)
# prediction
y_pred_test = predict(svr_regressor,newdata = test_set)
print(y_pred_test)
man_in = 6.5
y_pred_man = predict(svr_regressor,data.frame(Level = man_in))
print(y_pred_man)
# Training set with test set
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$Level, y = training_set$Salary),
colour = "Green")+
geom_point(aes(x = test_set$Level, y = predict(svr_regressor, newdata = test_set)),
colour = "red")+
geom_point(aes(x = man_in, y = y_pred_man),
colour = "magenta")+
geom_line(aes( x = training_set$Level, y = predict(svr_regressor, newdata = training_set)),
colour = 'blue')+
ggtitle("Salary Prediction ")+
xlab("position")+
ylab("Salary")
# Summary of the simple regression and polynomial regression
print(summary(svr_regressor))
#SVR
s_dataset = read.csv("Position_Salaries.csv")
# spliting the data_set
library(caTools)
set.seed(123)
to_split = sample.split(s_dataset$Salary,SplitRatio = 0.9)
training_set = subset(s_dataset,to_split == TRUE)
test_set = subset(s_dataset,to_split == FALSE)
# training(fitting) the data_set SVR linear
#install.packages('e1071')
library(e1071)
svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression',
kernel = 'radial'
)
# prediction
y_pred_test = predict(svr_regressor,newdata = test_set)
print(y_pred_test)
man_in = 6.5
y_pred_man = predict(svr_regressor,data.frame(Level = man_in))
print(y_pred_man)
# Training set with test set
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$Level, y = training_set$Salary),
colour = "Green")+
geom_point(aes(x = test_set$Level, y = predict(svr_regressor, newdata = test_set)),
colour = "red")+
geom_point(aes(x = man_in, y = y_pred_man),
colour = "magenta")+
geom_line(aes( x = training_set$Level, y = predict(svr_regressor, newdata = training_set)),
colour = 'blue')+
ggtitle("Salary Prediction ")+
xlab("position")+
ylab("Salary")
# Summary of the simple regression and polynomial regression
print(summary(svr_regressor))
print(y_pred_man)
print(y_pred_test)
#SVR
s_dataset = read.csv("Position_Salaries.csv")
# spliting the data_set
library(caTools)
set.seed(123)
to_split = sample.split(s_dataset$Salary,SplitRatio = 0.9)
training_set = subset(s_dataset,to_split == TRUE)
test_set = subset(s_dataset,to_split == FALSE)
training_set = s_dataset
# training(fitting) the data_set SVR linear
#install.packages('e1071')
library(e1071)
svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression',
kernel = 'radial'
)
# prediction
y_pred_test = predict(svr_regressor,newdata = test_set)
print(y_pred_test)
man_in = 6.5
y_pred_man = predict(svr_regressor,data.frame(Level = man_in))
print(y_pred_man)
# Training set with test set
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$Level, y = training_set$Salary),
colour = "Green")+
geom_point(aes(x = test_set$Level, y = predict(svr_regressor, newdata = test_set)),
colour = "red")+
geom_point(aes(x = man_in, y = y_pred_man),
colour = "magenta")+
geom_line(aes( x = training_set$Level, y = predict(svr_regressor, newdata = training_set)),
colour = 'blue')+
ggtitle("Salary Prediction ")+
xlab("position")+
ylab("Salary")
# Summary of the simple regression and polynomial regression
print(summary(svr_regressor))
print(y_pred_man)
print(y_pred_test)
# training(fitting) the data_set SVR linear
#install.packages('e1071')
library(e1071)
#SVR
s_dataset = read.csv("Position_Salaries.csv")
# spliting the data_set
library(caTools)
set.seed(123)
to_split = sample.split(s_dataset$Salary,SplitRatio = 0.9)
training_set = subset(s_dataset,to_split == TRUE)
test_set = subset(s_dataset,to_split == FALSE)
# training(fitting) the data_set SVR linear
#install.packages('e1071')
library(e1071)
svr_regressor = svm(formula = Salary ~ Level , #note ' Salary ~ Level ' dosent work, reomve the "'"
data = training_set,
type  = 'eps-regression',
kernel = 'radial'
)
# prediction
y_pred_test = predict(svr_regressor,newdata = test_set)
print(y_pred_test)
man_in = 6.5
y_pred_man = predict(svr_regressor,data.frame(Level = man_in))
print(y_pred_man)
# Training set with test set
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$Level, y = training_set$Salary),
colour = "Green")+
geom_point(aes(x = test_set$Level, y = predict(svr_regressor, newdata = test_set)),
colour = "red")+
geom_point(aes(x = man_in, y = y_pred_man),
colour = "magenta")+
geom_line(aes( x = training_set$Level, y = predict(svr_regressor, newdata = training_set)),
colour = 'blue')+
ggtitle("Salary Prediction ")+
xlab("position")+
ylab("Salary")
# Summary of the simple regression and polynomial regression
print(summary(svr_regressor))
print(y_pred_man)
print(y_pred_test)
